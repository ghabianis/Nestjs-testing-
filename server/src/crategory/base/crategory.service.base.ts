/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, Crategory, Product } from "@prisma/client";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { DbService } from "src/dbService/db.service";

export class CrategoryServiceBase {
  constructor(protected readonly prisma: DbService) {}

  async count<T extends Prisma.CrategoryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CrategoryFindManyArgs>
  ): Promise<number> {
    return this.prisma.crategory.count(args);
  }

  async findMany<T extends Prisma.CrategoryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CrategoryFindManyArgs>
  ): Promise<PaginatedInterface<Crategory>> {
    const [data, totalCount] = await Promise.all([
      this.prisma.crategory.findMany(args),
      this.prisma.crategory.count(),
    ]);

    return { paginatedResult: data, totalCount };
  }
  async findOne<T extends Prisma.CrategoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CrategoryFindUniqueArgs>
  ): Promise<Crategory | null> {
    return this.prisma.crategory.findUnique(args);
  }
  async create<T extends Prisma.CrategoryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CrategoryCreateArgs>
  ): Promise<Crategory> {
    return this.prisma.crategory.create<T>(args);
  }
  async update<T extends Prisma.CrategoryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CrategoryUpdateArgs>
  ): Promise<Crategory> {
    return this.prisma.crategory.update<T>(args);
  }
  async delete<T extends Prisma.CrategoryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CrategoryDeleteArgs>
  ): Promise<Crategory> {
    return this.prisma.crategory.delete(args);
  }

  async findProducts(
    parentId: string,
    args: Prisma.ProductFindManyArgs
  ): Promise<Product[]> {
    return this.prisma.crategory
      .findUnique({
        where: { id: parentId },
      })
      .products(args);
  }
}
